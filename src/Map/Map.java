package Map;
import Animal.Rabbit;
import Plant.Grass;

import java.util.Random;

public class Map {
///
///
/// //
///
///
///
///
    private final int SIZE_X;
    private final int SIZE_Y;
    private final Cell[][] map;
    private final Random random = new Random();
    private final int waterLevel = 4;  // –ü–æ—Ä–æ–≥ –¥–ª—è —É—Ä–æ–≤–Ω—è –≤–æ–¥—ã

    public Map(int sizeX, int sizeY) {
        this.SIZE_X = sizeX;
        this.SIZE_Y = sizeY;
        this.map = new Cell[SIZE_X][SIZE_Y];
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å –ø–ª–∞–≤–Ω—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –≤—ã—Å–æ—Ç—ã
    public void generate() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—ã—Å–æ—Ç—ã –ø–æ –∫—Ä–∞—è–º –∫–∞—Ä—Ç—ã
        int[][] controlPoints = new int[SIZE_X][SIZE_Y];

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤—ã—Å–æ—Ç—ã
        for (int i = 0; i < SIZE_X; i += SIZE_X / 5) {
            for (int j = 0; j < SIZE_Y; j += SIZE_Y / 5) {
                controlPoints[i][j] = random.nextInt(15) + 1;  // –ó–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –æ—Ç 1 –¥–æ 15
            }
        }

        // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –≤—ã—Å–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–∏ –∫–∞—Ä—Ç—ã
        for (int i = 0; i < SIZE_X; i++) {
            for (int j = 0; j < SIZE_Y; j++) {
                map[i][j] = new Cell(interpolateHeight(i, j, controlPoints));
            }
        }
    }

    // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –≤—ã—Å–æ—Ç—ã –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
    private int interpolateHeight(int x, int y, int[][] controlPoints) {
        int cellX = x / (SIZE_X / 5);
        int cellY = y / (SIZE_Y / 5);

        int left = controlPoints[cellX * (SIZE_X / 5)][cellY * (SIZE_Y / 5)];
        int right = controlPoints[(cellX + 1) * (SIZE_X / 5) % SIZE_X][cellY * (SIZE_Y / 5)];
        int top = controlPoints[cellX * (SIZE_X / 5)][(cellY + 1) * (SIZE_Y / 5) % SIZE_Y];
        int bottom = controlPoints[(cellX + 1) * (SIZE_X / 5) % SIZE_X][(cellY + 1) * (SIZE_Y / 5) % SIZE_Y];

        // –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
        double tx = (double) (x % (SIZE_X / 5)) / (SIZE_X / 5);
        double ty = (double) (y % (SIZE_Y / 5)) / (SIZE_Y / 5);

        // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –≤—ã—Å–æ—Ç—ã —Å —à—É–º–æ–º
        int topValue = (int) (left * (1 - tx) + right * tx);
        int bottomValue = (int) (top * (1 - tx) + bottom * tx);
        return (int) (topValue * (1 - ty) + bottomValue * ty + (random.nextDouble() - 0.5) * 2);
    }

    // –ü–µ—á–∞—Ç—å –∫–∞—Ä—Ç—ã —Å —É—á–µ—Ç–æ–º –±–∏–æ–º–æ–≤ –∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞
    public void print() {
        // –°–∫—Ä—ã–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä
        System.out.print("\033[?25l");
        for (int i = 0; i < SIZE_X; i++) {
            for (int j = 0; j < SIZE_Y; j++) {
                printTile(map[i][j]); // –ü–µ—á–∞—Ç–∞–µ–º —è—á–µ–π–∫—É
            }
            System.out.println();
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—á–∞—Ç–∏ —è—á–µ–π–∫–∏ –∫–∞—Ä—Ç—ã —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –≤—ã—Å–æ—Ç—ã
    private void printTile(Cell cell) {
        String resetColor = "\u001B[0m";
        int level = cell.getLevel();
        cell.setPlant(new Grass('@',2,2));
        System.out.print("\u001B[32müå±" + resetColor);
       /* if (level < waterLevel) {
            System.out.print("\u001B[34müíß" + resetColor);  // –í–æ–¥–∞
        } else if (level == 4) {
            // –ù–∏–∑–∫–∞—è —Ç—Ä–∞–≤–∞
        } else if (level == 5) {
            System.out.print("\u001B[92müåæ" + resetColor);  // –ü–æ–ª—è
        } else {
            System.out.print("  ");  // –õ–µ—Å–∞
        }*/
    }

    public Cell[][] getMap() {
        return map;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–π—Ü–∞
    public void updateRabbitPosition(int rabbitX, int rabbitY, int previousRabbitX, int previousRabbitY) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∑–∞–π—Ü–∞
        System.out.print("\033[" + (previousRabbitX + 1) + ";" + (previousRabbitY * 2 + 1) + "H  "); // –û—á–∏—â–∞–µ–º —è—á–µ–π–∫—É
        // –ü–µ—á–∞—Ç–∞–µ–º –∑–∞–π—Ü–∞ –Ω–∞ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
        System.out.print("\033[" + (rabbitX + 1) + ";" + (rabbitY * 2 + 1) + "H\uD83D\uDC30"); // –ü–µ—á–∞—Ç–∞–µ–º –∑–∞–π—Ü–∞
        System.out.flush(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–≤–æ–¥
    }
}
