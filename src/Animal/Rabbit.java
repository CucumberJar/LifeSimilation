package Animal;
import Map.Cell;

import java.util.ArrayList;
import java.util.Random;

public class Rabbit extends Animal {
    private static final int MAX_LIFE_ENERGY =30;
    private int energy=0;
    private String icon="üê∞";
    private static final int ENERGY_TO_REPRODUCE = 10;
    private static final int ENERGY_GAIN_FROM_GRASS = 1;
    private int LIFE_ENERGY = 20;

    private static   ArrayList<Rabbit> rabbits = new ArrayList<>();
    public Rabbit(int MAX_AGE, double speed, int positionX, int positionY) {
        super(MAX_AGE, speed, positionX, positionY);
      //  System.out.println("**/*/*/*//");
       rabbits.add(this);
    }

    public void moveAndEat(Cell[][] map) {
       // map[getPositionX()][getPositionY()].setAnimal(this);
        int targetX = -1;
        int targetY = -1;
        int minDistance = Integer.MAX_VALUE;
        int searchRadius = 10; // –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–≤—ã
        for (int x = Math.max(0, getPositionX() - searchRadius); x <= Math.min(map.length - 1, getPositionX() + searchRadius); x++) {
            for (int y = Math.max(0, getPositionY() - searchRadius); y <= Math.min(map[x].length - 1, getPositionY() + searchRadius); y++) {
                if (map[x][y].isHavePlant()) {
                    int distance = Math.abs(getPositionX() - x) + Math.abs(getPositionY() - y);
                    if (distance < minDistance) {
                        minDistance = distance;
                        targetX = x;
                        targetY = y;
                    }
                }
            }
        }
        if ( map[getPositionX()][getPositionY()].isHaveAnimal()) map[getPositionX()][getPositionY()].delAnimal();
        if (targetX != -1 && targetY != -1) {
            moveToGrass(targetX, targetY, map);
        } else {
            moveRandomly(map);
        }
        map[getPositionX()][getPositionY()].setAnimal(this);
        if (canReproduce()){
            reproduce(10,2.0,getPositionX(),getPositionY());
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–π—Ü–∞
        if (LIFE_ENERGY <= 0) {
            Cell currentCell = map[getPositionX()][getPositionY()];
            rabbits.remove(this); // –£–¥–∞–ª—è–µ–º –∑–∞–π—Ü–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            currentCell.delAnimal(); // –£–¥–∞–ª—è–µ–º –∑–∞–π—Ü–∞ —Å –∫–ª–µ—Ç–∫–∏ –∫–∞—Ä—Ç—ã
        }
    }

    private void moveToGrass(int targetX, int targetY, Cell[][] map) {
        Cell currentCell = map[getPositionX()][getPositionY()];

        // –î–≤–∏–∂–µ–Ω–∏–µ –∫ —Ç—Ä–∞–≤–µ
        if (getPositionX() < targetX && getPositionX() + 1 < map.length && !map[getPositionX() + 1][getPositionY()].isHaveAnimal()) {
            setPositionX(getPositionX() + 1);
        } else if (getPositionX() > targetX && getPositionX() - 1 >= 0 && !map[getPositionX() - 1][getPositionY()].isHaveAnimal()) {
            setPositionX(getPositionX() - 1);
        } else if (getPositionY() < targetY && getPositionY() + 1 < map[0].length && !map[getPositionX()][getPositionY() + 1].isHaveAnimal()) {
            setPositionY(getPositionY() + 1);
        } else if (getPositionY() > targetY && getPositionY() - 1 >= 0 && !map[getPositionX()][getPositionY() - 1].isHaveAnimal()) {
            setPositionY(getPositionY() - 1);
        }

        // –õ–æ–≥–∏–∫–∞ –ø–æ–µ–¥–∞–Ω–∏—è
        Cell targetCell = map[getPositionX()][getPositionY()];
        if (targetCell.isHavePlant()) {
            targetCell.getPlant(); // –ó–∞—è—Ü –µ—Å—Ç —Ç—Ä–∞–≤—É
            energy += ENERGY_GAIN_FROM_GRASS; // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
            LIFE_ENERGY = Math.min(LIFE_ENERGY + ENERGY_GAIN_FROM_GRASS, MAX_LIFE_ENERGY); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏
            targetCell.delPlant(); // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–≤—É –ø–æ—Å–ª–µ –ø–æ–µ–¥–∞–Ω–∏—è
        } else {
            LIFE_ENERGY--; // –ó–∞—è—Ü —Ç–µ—Ä—è–µ—Ç —ç–Ω–µ—Ä–≥–∏—é, –µ—Å–ª–∏ —Ç—Ä–∞–≤—ã –Ω–µ—Ç
        }
    }

    private void moveRandomly(Cell[][] map) {
        Random random = new Random();
        int direction = random.nextInt(4); // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: 0 - –≤–≤–µ—Ä—Ö, 1 - –≤–Ω–∏–∑, 2 - –≤–ª–µ–≤–æ, 3 - –≤–ø—Ä–∞–≤–æ

        switch (direction) {
            case 0: // –í–≤–µ—Ä—Ö
                if (getPositionX() - 1 >= 0 && !map[getPositionX() - 1][getPositionY()].isHaveAnimal()) {
                    setPositionX(getPositionX() - 1);
                }
                break;
            case 1: // –í–Ω–∏–∑
                if (getPositionX() + 1 < map.length && !map[getPositionX() + 1][getPositionY()].isHaveAnimal()) {
                    setPositionX(getPositionX() + 1);
                }
                break;
            case 2: // –í–ª–µ–≤–æ
                if (getPositionY() - 1 >= 0 && !map[getPositionX()][getPositionY() - 1].isHaveAnimal()) {
                    setPositionY(getPositionY() - 1);
                }
                break;
            case 3: // –í–ø—Ä–∞–≤–æ
                if (getPositionY() + 1 < map[0].length && !map[getPositionX()][getPositionY() + 1].isHaveAnimal()) {
                    setPositionY(getPositionY() + 1);
                }
                break;
        }

        LIFE_ENERGY--; // –ó–∞—è—Ü —Ç–µ—Ä—è–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ
    }




                    public  ArrayList<Rabbit> getRabbits() {

                    return rabbits;
    }

    public String getIcon() {
        return icon; // –ò–∫–æ–Ω–∫–∞ –∑–∞–π—Ü–∞
    }

    public boolean canReproduce() {
        return energy >= ENERGY_TO_REPRODUCE;
    }

    public Rabbit reproduce(int MAX_AGE, double speed, int positionX, int positionY) {
        if (canReproduce()) {
            energy /= 2; // –î–µ–ª–∏–º —ç–Ω–µ—Ä–≥–∏—é –º–µ–∂–¥—É —Å–æ–±–æ–π –∏ –ø–æ—Ç–æ–º–∫–æ–º

            return new Rabbit(MAX_AGE,speed,positionX,positionY);
        }
        return null;
    }
}